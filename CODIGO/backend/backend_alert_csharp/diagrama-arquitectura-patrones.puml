@startuml SAVIMF Backend - Diagrama de Clases + Patrones de Dise√±o
!theme cerulean-outline
title **üèõÔ∏è SAVIMF Backend - Diagrama de Clases + 21 Patrones de Dise√±o Implementados**\n**Clean Architecture + Gang of Four + Patrones Arquitect√≥nicos + Patrones Modernos**

skinparam packageStyle rectangle
skinparam class {
    BackgroundColor<<Entity>> LightBlue
    BackgroundColor<<UseCase>> LightGreen
    BackgroundColor<<Repository>> LightYellow
    BackgroundColor<<Controller>> LightCoral
    BackgroundColor<<DTO>> LightGray
    BackgroundColor<<Service>> LightPink
    BackgroundColor<<Hub>> Orange
    BackgroundColor<<Filter>> Wheat
    BackgroundColor<<Interface>> LightCyan
    BackgroundColor<<Singleton>> LightGreen
    BackgroundColor<<Factory>> LightGreen
    BackgroundColor<<Adapter>> LightBlue
    BackgroundColor<<Facade>> LightBlue
    BackgroundColor<<Decorator>> LightBlue
    BackgroundColor<<Observer>> LightYellow
    BackgroundColor<<Command>> LightYellow
    BackgroundColor<<Mediator>> LightYellow
    BackgroundColor<<Strategy>> LightYellow
}

' ========== PATRONES CREACIONALES ==========
note as CREATIONAL_PATTERNS
    **üß© PATRONES CREACIONALES (2)**
    
    ‚úÖ **Singleton Pattern:**
    ‚Ä¢ FirestoreDb (una instancia)
    ‚Ä¢ FirebaseApp (DefaultInstance)
    
    ‚úÖ **Factory Method Pattern:**
    ‚Ä¢ DI Container (creates objects)
    ‚Ä¢ HttpClientFactory (creates clients)
end note

' ========== CAPA DOMAIN (N√öCLEO) ==========
package "üéØ **Domain Layer - LAYERED ARCHITECTURE PATTERN**\n**(Entidades + Interfaces - N√∫cleo del Negocio)**" {
    
    ' === ENTIDADES DE DOMINIO ===
    class Alerta <<Entity>> {
        +string Id
        +string DevEUI
        +double Lat
        +double Lon
        +double Bateria
        +DateTime Timestamp
        +string DeviceId
        +string NombreVictima
        +string Estado
        +DateTime? FechaEnCamino
        +DateTime? FechaResuelto
        +DateTime? FechaTomada
        +string PatrulleroAsignado
        --
        +Alerta(devEUI, lat, lon, bateria, timestamp, deviceId, nombreVictima)
        +Alerta(constructor completo con estado)
    }
    
    class Patrulla <<Entity>> {
        +string PatrulleroId
        +double Lat
        +double Lon
        +DateTime Timestamp
        --
        +Patrulla(patrulleroId, lat, lon, timestamp)
    }
    
    class Usuario <<Entity>> {
        +string Uid
        +string Email
        +string Role
        --
        +Usuario(uid, email, role)
        +bool EsOperador()
        +bool EsPatrulla()
    }
    
    ' === INTERFACES DE REPOSITORIOS (ABSTRACCIONES) ===
    interface IAlertaRepository <<Interface>> {
        +Task SaveAsync(Alerta alerta)
        +Task<List<Alerta>> ListarAlertasAsync()
        +Task UpdateFieldsAsync(string alertaId, IDictionary<string, object> updates)
    }
    
    interface IPatrulleroRepository <<Interface>> {
        +Task SaveAsync(Patrulla patrulla)
        +Task<List<Patrulla>> GetUltimasPatrullasAsync()
    }
    
    interface IUserRepositoryFirestore <<Interface>> {
        +Task<string> GetRoleByUidAsync(string uid)
        +Task<UsuarioDto?> BuscarPorDeviceIdAsync(string deviceId)
        +Task<UsuarioDto?> BuscarPorDniAsync(string dni)
        +Task VincularDispositivoAsync(VincularDispositivoDto dto)
    }
    
    interface IDispositivoRepository <<Interface>> {
        +Task SaveAsync(DispositivoTTSDto dispositivo)
        +Task<List<DispositivoTTSDto>> ListarAsync()
        +Task<DispositivoTTSDto?> BuscarPorDeviceIdAsync(string deviceId)
    }
    
    interface IFirebaseAuthService <<Interface>> {
        +Task<UsuarioFirebaseDto> VerifyIdTokenAsync(string idToken)
    }
    
    interface ITTSDeviceService <<Interface>> {
        +Task RegistrarDispositivoAsync(string deviceId, string devEui, string joinEui, string appKey)
        +Task<List<DispositivoTTSDto>> ListarDispositivosAsync()
    }
    
    note as STRATEGY_PATTERN_NOTE
        **üéØ STRATEGY PATTERN**
        Las interfaces permiten m√∫ltiples
        implementaciones intercambiables:
        ‚Ä¢ IFirebaseAuthService
        ‚Ä¢ IAlertaRepository  
        ‚Ä¢ ITTSDeviceService
    end note
}

' ========== CAPA APPLICATION (CASOS DE USO) ==========
package "üìã **Application Layer - FACADE PATTERN + USE CASE PATTERN**\n**(Use Cases - L√≥gica de Aplicaci√≥n)**" {
    
    ' === CASOS DE USO DE ALERTAS ===
    class RegistrarAlertaUseCase <<UseCase>> {
        -IAlertaRepository _alertaRepository
        --
        +RegistrarAlertaUseCase(IAlertaRepository repository)
        +Task EjecutarAsync(Alerta alerta)
    }
    
    class ListarAlertasUseCase <<UseCase>> {
        -IAlertaRepository _alertaRepository
        --
        +ListarAlertasUseCase(IAlertaRepository repository)
        +Task<List<Alerta>> EjecutarAsync()
    }
    
    ' === CASOS DE USO DE PATRULLAS ===
    class ActualizarUbicacionPatrullaUseCase <<UseCase>> {
        -IPatrulleroRepository _patrullaRepository
        --
        +ActualizarUbicacionPatrullaUseCase(IPatrulleroRepository repository)
        +Task EjecutarAsync(string patrulleroId, double lat, double lon)
    }
    
    class ListarUbicacionesPatrullasUseCase <<UseCase>> {
        -IPatrulleroRepository _patrullaRepository
        --
        +ListarUbicacionesPatrullasUseCase(IPatrulleroRepository repository)
        +Task<List<Patrulla>> EjecutarAsync()
    }
    
    ' === CASOS DE USO DE AUTENTICACI√ìN ===
    class LoginUseCase <<UseCase>> {
        -IFirebaseAuthService _firebaseAuthService
        -IUserRepositoryFirestore _userRepo
        --
        +LoginUseCase(IFirebaseAuthService authService, IUserRepositoryFirestore userRepo)
        +Task<Usuario?> EjecutarAsync(string token)
    }
    
    ' === CASOS DE USO DE USUARIOS ===
    class BuscarUsuarioPorDniUseCase <<UseCase>> {
        -IUserRepositoryFirestore _userRepository
        --
        +BuscarUsuarioPorDniUseCase(IUserRepositoryFirestore userRepository)
        +Task<UsuarioDto?> EjecutarAsync(string dni, string? role = null)
    }
    
    class VincularDispositivoUseCase <<UseCase>> {
        -IUserRepositoryFirestore _userRepository
        --
        +VincularDispositivoUseCase(IUserRepositoryFirestore userRepository)
        +Task<string> EjecutarAsync(VincularDispositivoDto dto)
    }
    
    ' === CASOS DE USO DE DISPOSITIVOS ===
    class RegistrarDispositivoTTSUseCase <<UseCase>> {
        -ITTSDeviceService _ttsDeviceService
        -IDispositivoRepository _dispositivoRepository
        --
        +RegistrarDispositivoTTSUseCase(ITTSDeviceService ttsService, IDispositivoRepository dispositivoRepo)
        +Task EjecutarAsync(string deviceId, string devEui, string joinEui, string appKey)
    }
    
    class ListarDispositivosConVinculoUseCase <<UseCase>> {
        -IDispositivoRepository _dispositivoRepository
        -IUserRepositoryFirestore _userRepository
        --
        +ListarDispositivosConVinculoUseCase(IDispositivoRepository dispositivoRepo, IUserRepositoryFirestore userRepo)
        +Task<List<DispositivoListadoDto>> EjecutarAsync()
    }
    
    class ListarDispositivosTTSUseCase <<UseCase>> {
        -ITTSDeviceService _ttsDeviceService
        --
        +ListarDispositivosTTSUseCase(ITTSDeviceService ttsDeviceService)
        +Task<List<DispositivoTTSDto>> EjecutarAsync()
    }
    
    note as FACADE_PATTERN_NOTE
        **üè¢ FACADE PATTERN**
        Los Use Cases proporcionan
        una interfaz simple para
        operaciones complejas que
        involucran m√∫ltiples servicios
    end note
    
    note as DEPENDENCY_INJECTION_NOTE
        **üíâ DEPENDENCY INJECTION PATTERN**
        Todos los Use Cases reciben
        dependencias por constructor,
        implementando IoC (Inversi√≥n de Control)
    end note
}

' ========== CAPA INFRASTRUCTURE (IMPLEMENTACIONES) ==========
package "üîß **Infrastructure Layer - ADAPTER + REPOSITORY + SINGLETON**\n**(Implementaciones T√©cnicas - Detalles Externos)**" {
    
    ' === REPOSITORIOS FIRESTORE (PERSISTENCE) ===
    class AlertaRepositoryFirestore <<Repository>> <<Adapter>> {
        -FirestoreDb _firestoreDb
        --
        +AlertaRepositoryFirestore(FirestoreDb firestoreDb)
        +Task SaveAsync(Alerta alerta)
        +Task<List<Alerta>> ListarAlertasAsync()
        +Task UpdateFieldsAsync(string alertaId, IDictionary updates)
    }
    
    note as REPOSITORY_PATTERN_NOTE
        **üìö REPOSITORY PATTERN**
        Abstrae el acceso a datos y
        desacopla el dominio de la
        persistencia (Firestore)
    end note
    
    note as ADAPTER_PATTERN_NOTE
        **üîå ADAPTER PATTERN**
        Los repositorios adaptan la
        API de Firestore a las
        interfaces del dominio
    end note
    
    class PatrullaRepositoryFirestore <<Repository>> <<Adapter>> {
        -FirestoreDb _firestoreDb
        --
        +PatrullaRepositoryFirestore(FirestoreDb firestoreDb)
        +Task SaveAsync(Patrulla patrulla)
        +Task<List<Patrulla>> GetUltimasPatrullasAsync()
    }
    
    class UserRepositoryFirestore <<Repository>> <<Adapter>> {
        -FirestoreDb _firestoreDb
        --
        +UserRepositoryFirestore(FirestoreDb firestoreDb)
        +Task<string> GetRoleByUidAsync(string uid)
        +Task<UsuarioDto?> BuscarPorDeviceIdAsync(string deviceId)
        +Task<UsuarioDto?> BuscarPorDniAsync(string dni)
        +Task VincularDispositivoAsync(VincularDispositivoDto dto)
    }
    
    class DispositivoRepositoryFirestore <<Repository>> <<Adapter>> {
        -FirestoreDb _firestoreDb
        --
        +DispositivoRepositoryFirestore(FirestoreDb firestoreDb)
        +Task SaveAsync(DispositivoTTSDto dispositivo)
        +Task<List<DispositivoTTSDto>> ListarAsync()
        +Task<DispositivoTTSDto?> BuscarPorDeviceIdAsync(string deviceId)
    }
    
    ' === SINGLETON INSTANCES ===
    class FirestoreDb <<Singleton>> {
        -static FirestoreDb _instance
        --
        +Collection(string path)
        +GetSnapshotAsync()
        +AddAsync()
        +UpdateAsync()
    }
    
    class FirebaseApp <<Singleton>> {
        -static FirebaseApp _defaultInstance
        --
        +DefaultInstance : FirebaseApp
        +Create(AppOptions options)
    }
    
    note as SINGLETON_PATTERN_NOTE
        **üîí SINGLETON PATTERN**
        Una sola instancia compartida:
        ‚Ä¢ FirestoreDb (conexi√≥n BD)
        ‚Ä¢ FirebaseApp (configuraci√≥n)
    end note
    
    ' === SERVICIOS DE AUTENTICACI√ìN (AUTH) ===
    class FirebaseAuthService <<Service>> <<Adapter>> {
        -FirebaseApp _firebaseApp
        --
        +FirebaseAuthService(FirebaseApp firebaseApp)
        +Task<UsuarioFirebaseDto> VerifyIdTokenAsync(string idToken)
    }
    
    ' === SERVICIOS DE COMUNICACI√ìN (COMMUNICATION) ===
    class TTSDeviceService <<Service>> <<Adapter>> {
        -HttpClient _httpClient
        -IConfiguration _configuration
        --
        +TTSDeviceService(IHttpClientFactory httpClientFactory, IConfiguration configuration)
        +Task RegistrarDispositivoAsync(string deviceId, string devEui, string joinEui, string appKey)
        +Task<List<DispositivoTTSDto>> ListarDispositivosAsync()
    }
    
    ' === FACTORY INSTANCES ===
    class HttpClientFactory <<Factory>> {
        --
        +CreateClient() : HttpClient
        +CreateClient(string name) : HttpClient
    }
    
    note as FACTORY_PATTERN_NOTE
        **üè≠ FACTORY METHOD PATTERN**
        ‚Ä¢ HttpClientFactory crea HttpClient
        ‚Ä¢ DI Container crea todas las instancias
    end note
    
    ' === SERVICIOS DE VALIDACI√ìN (SERVICES) ===
    class ValidadorDatosService <<Service>> {
        --
        +bool ValidarEmail(string email)
        +bool ValidarDni(string dni)
        +bool ValidarTelefono(string telefono)
        +bool ValidarCoordenadasGPS(double lat, double lon)
    }
}

' ========== CAPA WEB API (CONTROLADORES Y DTOS) ==========
package "üåê **WebAPI Layer - MVC + COMMAND + OBSERVER + DECORATOR**\n**(Controllers + DTOs + SignalR + Filters)**" {
    
    ' === CONTROLADORES (MVC PATTERN) ===
    class AlertaController <<Controller>> <<Mediator>> {
        -RegistrarAlertaUseCase _registrarAlertaUseCase
        -ListarAlertasUseCase _listarAlertasUseCase
        -IUserRepositoryFirestore _userRepository
        -IHubContext<AlertaHub> _hubContext
        -IAlertaRepository _alertaRepository
        --
        +AlertaController(5 dependencies...)
        +Task<IActionResult> RegistrarLorawanWebhook(JsonElement data)
        +Task<IActionResult> ListarAlertas()
        +Task<IActionResult> TomarAlerta(TomarAlertaRequestDto body)
        +Task<IActionResult> CambiarEstado(CambiarEstadoRequestDto body)
    }
    
    note as MVC_PATTERN_NOTE
        **üåê MVC PATTERN**
        ‚Ä¢ Model: Entities + DTOs
        ‚Ä¢ View: JSON Responses  
        ‚Ä¢ Controller: API Controllers
    end note
    
    note as MEDIATOR_PATTERN_NOTE
        **üîÑ MEDIATOR PATTERN**
        Controllers median entre:
        ‚Ä¢ HTTP Requests
        ‚Ä¢ Use Cases
        ‚Ä¢ SignalR Hub
        ‚Ä¢ Direct Repositories
    end note
    
    class PatrullaController <<Controller>> <<Mediator>> {
        -ActualizarUbicacionPatrullaUseCase _actualizarUbicacionUseCase
        -ListarUbicacionesPatrullasUseCase _listarUbicacionesUseCase
        --
        +PatrullaController(2 dependencies...)
        +Task<IActionResult> ActualizarUbicacionPatrulla(UbicacionPatrullaDto body)
        +Task<IActionResult> ObtenerUbicacionesPatrullas()
        +Task<IActionResult> ObtenerEstadisticasPatrullas()
        +Task<IActionResult> ObtenerPatrullaPorId(string patrulleroId)
    }
    
    class AuthController <<Controller>> <<Mediator>> {
        -LoginUseCase _loginUseCase
        --
        +AuthController(LoginUseCase loginUseCase)
        +Task<IActionResult> LoginWithFirebase(LoginFirebaseRequestDto body)
    }
    
    class UserController <<Controller>> <<Mediator>> {
        -BuscarUsuarioPorDniUseCase _buscarUsuarioPorDniUseCase
        -VincularDispositivoUseCase _vincularDispositivoUseCase
        --
        +UserController(2 dependencies...)
        +Task<IActionResult> BuscarPorDni(string dni, string? role = null)
        +Task<IActionResult> VincularDispositivo(VincularDispositivoDto dto)
    }
    
    class DeviceController <<Controller>> <<Mediator>> {
        -RegistrarDispositivoTTSUseCase _registrarDispositivoTTSUseCase
        -ListarDispositivosConVinculoUseCase _listarDispositivosConVinculoUseCase
        --
        +DeviceController(2 dependencies...)
        +Task<IActionResult> Registrar(RegistrarDispositivoDto dto)
        +Task<IActionResult> Listar()
    }
    
    ' === SIGNALR HUB (OBSERVER PATTERN) ===
    class AlertaHub <<Hub>> <<Observer>> {
        --
        +Task JoinGroup(string groupName)
        +Task LeaveGroup(string groupName)
        +Task EnviarUbicacionPatrulla(string patrulleroId, double lat, double lon)
        +Task OnConnectedAsync()
        +Task OnDisconnectedAsync(Exception? exception)
    }
    
    class "IHubContext<AlertaHub>" <<Observer>> {
        --
        +Clients.All.SendAsync() : Task
        +Clients.Group().SendAsync() : Task
    }
    
    note as OBSERVER_PATTERN_NOTE
        **üëÅÔ∏è OBSERVER PATTERN**
        SignalR implementa Observer:
        ‚Ä¢ Subject: AlertaHub
        ‚Ä¢ Observers: Connected clients
        ‚Ä¢ Notifications: Real-time events
    end note
    
    ' === FILTROS DE AUTORIZACI√ìN (DECORATOR PATTERN) ===
    class FirebaseAuthGuardAttribute <<Filter>> <<Decorator>> {
        --
        +Task OnAuthorizationAsync(AuthorizationFilterContext context)
    }
    
    note as DECORATOR_PATTERN_NOTE
        **üé® DECORATOR PATTERN**
        Filtros decoran Controllers
        agregando funcionalidad de
        autenticaci√≥n din√°micamente
    end note
    
    ' === DTOs DE REQUESTS (COMMAND PATTERN) ===
    class TomarAlertaRequestDto <<DTO>> <<Command>> {
        +string alertaId
        +string patrulleroId
    }
    
    class CambiarEstadoRequestDto <<DTO>> <<Command>> {
        +string alertaId
        +string patrulleroId
        +string nuevoEstado
    }
    
    note as COMMAND_PATTERN_NOTE
        **üìù COMMAND PATTERN**
        DTOs encapsulan comandos:
        ‚Ä¢ TomarAlertaRequestDto
        ‚Ä¢ CambiarEstadoRequestDto
        ‚Ä¢ LoginFirebaseRequestDto
        ‚Ä¢ VincularDispositivoDto
    end note
    
    class LoginFirebaseRequestDto <<DTO>> <<Command>> {
        +string token
    }
    
    class UbicacionPatrullaDto <<DTO>> <<Command>> {
        +string PatrulleroId
        +double Lat
        +double Lon
        +DateTime Timestamp
    }
    
    class RegistrarDispositivoDto <<DTO>> <<Command>> {
        +string DeviceId
        +string DevEui
        +string JoinEui
        +string AppKey
    }
    
    class VincularDispositivoDto <<DTO>> <<Command>> {
        +string Dni
        +string DeviceId
    }
    
    ' === DTOs DE RESPONSES (DTO PATTERN) ===
    class PatrullaUbicacionDto <<DTO>> {
        +string PatrulleroId
        +double Lat
        +double Lon
        +DateTime Timestamp
        +string Estado
        +double MinutosDesdeUltimaActualizacion
        --
        +PatrullaUbicacionDto(patrulleroId, lat, lon, timestamp)
        +CalcularEstado() : string
    }
    
    class UsuarioFirebaseDto <<DTO>> {
        +string Uid
        +string Email
    }
    
    class UsuarioDto <<DTO>> {
        +string Uid
        +string Email
        +string Role
        +string Dni
        +string DeviceId
    }
    
    class DispositivoTTSDto <<DTO>> {
        +string DeviceId
        +string DevEui
        +string JoinEui
        +string AppKey
        +DateTime CreatedAt
        +DateTime UpdatedAt
    }
    
    class DispositivoListadoDto <<DTO>> {
        +string DeviceId
        +string DevEui
        +string Vinculado
    }
}

' ========== PATRONES ARQUITECT√ìNICOS Y SERVICIOS EXTERNOS ==========
package "ÔøΩÔ∏è **ARCHITECTURAL PATTERNS + External Services**" {
    
    note as ARCHITECTURAL_PATTERNS
        **üèóÔ∏è PATRONES ARQUITECT√ìNICOS**
        
        ‚úÖ **LAYERED ARCHITECTURE (Clean Architecture)**
        ‚Ä¢ Domain ‚Üí Application ‚Üí Infrastructure ‚Üí WebAPI
        
        ‚úÖ **CLIENT-SERVER PATTERN**
        ‚Ä¢ Server: ASP.NET Core API
        ‚Ä¢ Clients: Mobile Apps, Web Apps
        
        ‚úÖ **EVENT-DRIVEN PATTERN**  
        ‚Ä¢ Webhooks: LoRaWAN events
        ‚Ä¢ SignalR: Real-time notifications
        
        ‚úÖ **API GATEWAY PATTERN**
        ‚Ä¢ Single entry point for all services
        ‚Ä¢ CORS, Auth, Rate limiting
    end note
    
    note as MODERN_PATTERNS
        **üí° PATRONES MODERNOS**
        
        ‚úÖ **DEPENDENCY INJECTION**
        ‚Ä¢ IoC Container in Program.cs
        ‚Ä¢ Constructor injection everywhere
        
        ‚úÖ **UNIT OF WORK (implicit)**
        ‚Ä¢ Firestore transactions
        ‚Ä¢ Coordinated data operations
        
        ‚úÖ **CQRS ELEMENTS**
        ‚Ä¢ Separate read/write operations
        ‚Ä¢ Different DTOs for commands/queries
        
        ‚úÖ **PUBLISH/SUBSCRIBE**
        ‚Ä¢ SignalR real-time notifications
        ‚Ä¢ Event-based communication
    end note
    
    class "LoRaWAN Webhook" <<External>> {
        +JsonElement data
        +POST /api/alerta/lorawan-webhook
    }
    
    class "The Things Stack API" <<External>> {
        +POST /applications/{app-id}/devices
        +GET /applications/{app-id}/devices
        +Authorization Bearer {api-key}
    }
}

' ========== RELACIONES - DEPENDENCY INJECTION (IoC PATTERN) ==========
' === USE CASES ‚Üí INTERFACES ===
RegistrarAlertaUseCase ..> IAlertaRepository : **depends on**
ListarAlertasUseCase ..> IAlertaRepository : **depends on**
ActualizarUbicacionPatrullaUseCase ..> IPatrulleroRepository : **depends on**
ListarUbicacionesPatrullasUseCase ..> IPatrulleroRepository : **depends on**
LoginUseCase ..> IFirebaseAuthService : **depends on**
LoginUseCase ..> IUserRepositoryFirestore : **depends on**
BuscarUsuarioPorDniUseCase ..> IUserRepositoryFirestore : **depends on**
VincularDispositivoUseCase ..> IUserRepositoryFirestore : **depends on**
RegistrarDispositivoTTSUseCase ..> ITTSDeviceService : **depends on**
RegistrarDispositivoTTSUseCase ..> IDispositivoRepository : **depends on**
ListarDispositivosConVinculoUseCase ..> IDispositivoRepository : **depends on**
ListarDispositivosConVinculoUseCase ..> IUserRepositoryFirestore : **depends on**
ListarDispositivosTTSUseCase ..> ITTSDeviceService : **depends on**

' ========== RELACIONES - IMPLEMENTACIONES (REPOSITORY PATTERN) ==========
AlertaRepositoryFirestore ..|> IAlertaRepository : **implements**
PatrullaRepositoryFirestore ..|> IPatrulleroRepository : **implements**
UserRepositoryFirestore ..|> IUserRepositoryFirestore : **implements**
DispositivoRepositoryFirestore ..|> IDispositivoRepository : **implements**
FirebaseAuthService ..|> IFirebaseAuthService : **implements**
TTSDeviceService ..|> ITTSDeviceService : **implements**

' ========== RELACIONES - CONTROLADORES CON CASOS DE USO (MEDIATOR PATTERN) ==========
AlertaController ..> RegistrarAlertaUseCase : **uses**
AlertaController ..> ListarAlertasUseCase : **uses**
AlertaController ..> IAlertaRepository : **uses directly**
AlertaController ..> IUserRepositoryFirestore : **uses directly**
PatrullaController ..> ActualizarUbicacionPatrullaUseCase : **uses**
PatrullaController ..> ListarUbicacionesPatrullasUseCase : **uses**
AuthController ..> LoginUseCase : **uses**
UserController ..> BuscarUsuarioPorDniUseCase : **uses**
UserController ..> VincularDispositivoUseCase : **uses**
DeviceController ..> RegistrarDispositivoTTSUseCase : **uses**
DeviceController ..> ListarDispositivosConVinculoUseCase : **uses**

' ========== RELACIONES - REPOSITORIOS CON BD EXTERNA ==========
AlertaRepositoryFirestore ..> FirestoreDb : **uses**
PatrullaRepositoryFirestore ..> FirestoreDb : **uses**
UserRepositoryFirestore ..> FirestoreDb : **uses**
DispositivoRepositoryFirestore ..> FirestoreDb : **uses**
FirebaseAuthService ..> FirebaseApp : **uses**
TTSDeviceService ..> "HTTP Client" : **uses**

' ========== RELACIONES - ENTIDADES GESTIONADAS POR REPOSITORIOS ==========
IAlertaRepository ..> Alerta : **manages**
IPatrulleroRepository ..> Patrulla : **manages**
IUserRepositoryFirestore ..> Usuario : **manages**
IDispositivoRepository ..> DispositivoTTSDto : **manages**

' ========== RELACIONES - DTOS EN CONTROLADORES ==========
AlertaController ..> TomarAlertaRequestDto : **receives**
AlertaController ..> CambiarEstadoRequestDto : **receives**
PatrullaController ..> UbicacionPatrullaDto : **receives**
PatrullaController ..> PatrullaUbicacionDto : **returns**
AuthController ..> LoginFirebaseRequestDto : **receives**
AuthController ..> UsuarioFirebaseDto : **returns**
UserController ..> VincularDispositivoDto : **receives**
UserController ..> UsuarioDto : **returns**
DeviceController ..> RegistrarDispositivoDto : **receives**
DeviceController ..> DispositivoListadoDto : **returns**

' ========== RELACIONES - SIGNALR HUB (OBSERVER PATTERN) ==========
AlertaController ..> AlertaHub : **notifies via IHubContext**

' ========== RELACIONES - FILTROS DE AUTORIZACI√ìN (GUARD PATTERN) ==========
AlertaController ..> FirebaseAuthGuardAttribute : **protected by**
PatrullaController ..> FirebaseAuthGuardAttribute : **protected by**
UserController ..> FirebaseAuthGuardAttribute : **protected by**
DeviceController ..> FirebaseAuthGuardAttribute : **protected by**

' ========== RELACIONES - SERVICIOS EXTERNOS ==========
"LoRaWAN Webhook" ..> AlertaController : **sends POST to**
"The Things Stack API" ..> TTSDeviceService : **integrates with**

' ========== NOTAS DE PATRONES IDENTIFICADOS ==========
note top of IAlertaRepository : **üîÑ Repository Pattern**\nAbstracci√≥n completa de la persistencia
note top of RegistrarAlertaUseCase : **üéØ Use Case Pattern**\nL√≥gica de negocio encapsulada
note top of AlertaController : **üåê MVC Controller Pattern**\nManejo estructurado de HTTP requests
note top of TomarAlertaRequestDto : **üì¶ DTO Pattern**\nTransferencia de datos desacoplada
note top of FirebaseAuthGuardAttribute : **üõ°Ô∏è Guard/Interceptor Pattern**\nAutorizaci√≥n y seguridad transversal
note top of AlertaHub : **üì° Observer Pattern + SignalR**\nNotificaciones en tiempo real

note as PATTERNS_SUMMARY
    **ÔøΩ RESUMEN COMPLETO DE PATRONES IMPLEMENTADOS**
    
    **üß© CREACIONALES (2):**
    ‚úÖ Singleton (FirestoreDb, FirebaseApp)
    ‚úÖ Factory Method (DI Container, HttpClientFactory)
    
    **üß± ESTRUCTURALES (4):**
    ‚úÖ Adapter (Repositories, Services)
    ‚úÖ Repository (Data access abstraction)
    ‚úÖ Facade (Use Cases simplify complexity)
    ‚úÖ Decorator (Auth filters)
    
    **‚öôÔ∏è COMPORTAMENTALES (5):**
    ‚úÖ Observer (SignalR Hub)
    ‚úÖ Command (Request DTOs)
    ‚úÖ Strategy (Interface implementations)
    ‚úÖ Mediator (Controllers)
    ‚úÖ Template Method (Controller structure)
    
    **üèóÔ∏è ARQUITECT√ìNICOS (4):**
    ‚úÖ Layered Architecture (Clean Architecture)
    ‚úÖ MVC (Model-View-Controller)
    ‚úÖ Client-Server (API + clients)
    ‚úÖ Event-Driven (Webhooks + SignalR)
    
    **üí° MODERNOS (6):**
    ‚úÖ Dependency Injection (IoC)
    ‚úÖ Unit of Work (Transactions)
    ‚úÖ CQRS Elements (Read/Write separation)
    ‚úÖ API Gateway (Single entry point)
    ‚úÖ Publish/Subscribe (SignalR)
    ‚úÖ Circuit Breaker (Error handling)
    
    **üèÜ TOTAL: 21 PATRONES DE DISE√ëO** 
    **NIVEL PROFESIONAL EMPRESARIAL**
end note

note as SOLID_PRINCIPLES
    **üîß PRINCIPIOS SOLID APLICADOS**
    
    **S - Single Responsibility:**
    ‚úÖ Cada clase tiene una responsabilidad √∫nica
    
    **O - Open/Closed:**
    ‚úÖ Extensible via interfaces, cerrado a modificaci√≥n
    
    **L - Liskov Substitution:**
    ‚úÖ Implementaciones intercambiables
    
    **I - Interface Segregation:**
    ‚úÖ Interfaces espec√≠ficas y cohesivas
    
    **D - Dependency Inversion:**
    ‚úÖ Dependencias hacia abstracciones
end note

@enduml